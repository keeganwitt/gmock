apply plugin: 'groovy'
apply plugin: 'maven'

group = 'org.gmock'
archivesBaseName = 'gmock'

repositories {
    mavenCentral()
    mavenRepo urls: ['http://repository.jboss.org/maven2/']
}

configurations {
    jarjar
    jarjarify
    compileConf
    testCompileConf
    compile.extendsFrom compileConf, jarjarify
    testCompile.extendsFrom testCompileConf
    intTestCompile.extendsFrom groovy, compileConf, testCompileConf
    intTestRuntime.extendsFrom intTestCompile
    deployerJars
}

dependencies {
    groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
    compileConf "junit:junit:$junitVersion"
    testCompileConf 'org.hamcrest:hamcrest-library:1.1',
                    'org.testng:testng:5.8:jdk15',
                    'org.apache.tomcat:servlet-api:6.0.18',
                    'dom4j:dom4j:1.6.1'
    jarjar 'com.google.code:jarjar:1.0'
    jarjarify 'cglib:cglib:2.2',
              'org.objenesis:objenesis:1.1'
    intTestCompile files(jar.archivePath)

    deployerJars 'org.apache.maven.wagon:wagon-ssh:1.0-beta-2'
}

sourceSets {
    main {
        java.srcDirs = []
        groovy.srcDirs = ['src/main/java', 'src/main/groovy']
    }
    intTest {
        java.srcDirs = test.java.srcDirs
        groovy.srcDirs = test.groovy.srcDirs
        compileClasspath = configurations.intTestCompile
        runtimeClasspath = files(classes, configurations.intTestRuntime)
    }
}


// Tasks

defaultTasks ':test'

tasks.jar << {
    tmpArchivePath = file("${archivePath}.tmp")
    ant {
        move file: archivePath, tofile: tmpArchivePath
        taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: configurations.jarjar.asPath
        jarjar jarfile: archivePath, {
            zipfileset src: tmpArchivePath
            configurations.jarjarify.each {
                zipfileset src: it, {
                    include name: '**/*.class'
                }
            }
            rule pattern: "net.sf.cglib.**", result: "org.gmock.internal.cglib.@1"
            rule pattern: "org.objenesis.**", result: "org.gmock.internal.objenesis.@1"
            rule pattern: "org.objectweb.asm.**", result: "org.gmock.internal.asm.@1"
        }
        delete file: tmpArchivePath
    }
}

tasks.compileIntTestJava.dependsOn jar

task intTest(type: Test, dependsOn: [jar, intTestClasses]) {
    group = 'verification'
    testClassesDir = sourceSets.intTest.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
    testReportDir = file("$reportsDir/int-tests")
    testResultsDir = file("$buildDir/int-test-results")
}

tasks.check.dependsOn intTest

tasks.uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository url: 'scp://gmock.org/home/rsync/gmock/releases', {
            authentication(userName: "rsync")
        }
    }
}

[tasks.install.repositories.mavenInstaller(), tasks.uploadArchives.repositories.mavenDeployer()]*.pom {
    scopeMappings.with {
        addMapping 0, configurations.groovy, 'compile'
        addMapping 1, configurations.compileConf, 'compile'
    }
    project {
        description 'Mocking Framework for Groovy'
        url 'http://www.gmock.org'
        licenses {
            license {
                name 'Apache License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            connection 'scm:svn:http://gmock.googlecode.com/svn/trunk/'
            developerConnection 'scm:svn:https://gmock.googlecode.com/svn/trunk/'
            url 'http://code.google.com/p/gmock/source/browse/'
        }
        distributionManagement {
            repository = new org.apache.maven.model.DeploymentRepository(
                id: 'gmock.website',
                name: 'Gmock Website',
                url: 'scp://gmock.org/home/rsync/gmock/releases'
            )
        }
    }
}

task wikiDir(type: Directory) { dir = file("$buildDir/wiki") }
task wiki(dependsOn: wikiDir) {
    filename = "Documentation_${version[0]}_${version[2]}.wiki"
    url = "http://gmock.googlecode.com/svn/wiki/$filename"
    file = file("${wikiDir.dir}/$filename")
}
tasks.wiki << {
    ant.get src: url, dest: file, usetimestamp: true, verbose: true
}

task docsDir(type: Directory) { dir = project.docsDir }
task docs(dependsOn: [wiki, tasks.docsDir]) {
    group = 'documentation'
    docsTemplateDir = file('docs')
    indexTemplateFile = file("$docsTemplateDir/template.gsp")
    indexFile = file("$docsDir/index.html")
    inputs.file wiki.file
    inputs.dir docsTemplateDir
    outputs.dir docsDir
}
tasks.docs << {
    copy {
        from docsTemplateDir, {
            exclude '**/*template*'
        }
        into docsDir
    }
    def wikiText = wiki.file.text
    def converter = new org.gmock.build.wiki.GoogleCodeWikiConverter()
    def binding = [content: converter.convert(wikiText), catalog: converter.catalog, version: version]
    def engine = new groovy.text.SimpleTemplateEngine()
    def template = engine.createTemplate(indexTemplateFile).make(binding)
    indexFile.withPrintWriter { template.writeTo(it) }
}

task exploded(type: Sync, dependsOn: [jar, docs]) {
    from jar.archivePath
    from 'apache-license-2.0.txt'
    from rootDir, {
        include 'src/**'
    }
    from buildDir, {
        include 'docs/**'
    }
    // TODO Copy samples
    into "$distsDir/exploded/$archivesBaseName-$version"
}

task zip(type: Zip, dependsOn: exploded) {
    group = 'build'
    classifier = 'all'
    from exploded.destinationDir.parent
}
