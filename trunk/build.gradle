usePlugin('groovy')
usePlugin('maven')

group = 'org.gmock'
version = '0.8.0'
archivesBaseName = 'gmock'

sourceCompatibility = 1.5
targetCompatibility = 1.5

srcDirNames = []
groovySrcDirNames = ['main/java', 'main/groovy']

groovyVersion = '1.6.0'
junitVersion = '4.5'

dependencies {
    addConfiguration 'jarjar'
    addConfiguration 'jarjarify'

    addMavenRepo()
    addMavenStyleRepo('JBossRepo', 'http://repository.jboss.org/maven2/')

    groovy "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "junit:junit:$junitVersion"
    testCompile 'org.hamcrest:hamcrest-library:1.1'

    jarjar 'com.google.code:jarjar:1.0'
    jarjarify 'cglib:cglib:2.2',
              'org.objenesis:objenesis:1.1'

    linkConfWithTask 'testRuntime', 'integrationTest'
}

if (System.getProperty('release') == null) {
    version += '-SNAPSHOT'
}

install {
    uploadResolvers.get('maven-installer').artifactPomContainer = [
        addArtifact: { org.apache.ivy.core.module.descriptor.Artifact artifact, File src -> artifactFile = src },
        createDeployableUnits: { List dependencies -> [(pomFile): artifactFile] }
    ] as org.gradle.api.internal.dependencies.maven.deploy.ArtifactPomContainer
}

dists {
    zip(classifier: 'all') {
        fileSet(dir: rootDir) {
            include('src/**', 'apache-license-2.0.txt', 'samples/*/pom.xml', 'samples/*/src/**')
        }
        files(archive_jar.archivePath)
    }
}

defaultTasks ':test'

[compile, test]*.doFirst {
    it.unmanagedClasspath = dependencies.resolve('jarjarify').clone()
}

archive_jar.doFirst {
    ant.delete(file: it.archivePath)
}

getTasksDependingOn(libs)*.dependsOn 'integrationTest'
install.dependsOn 'generatePom'

createTask('generatePom') {
    pomFile = file("$buildDir/pom.xml")
    ant {
        filter(token: 'gmockVersion', value: version)
        filter(token: 'groovyVersion', value: groovyVersion)
        filter(token: 'junitVersion', value: junitVersion)
        copy(file: file('pom.xml'), tofile: pomFile, overwrite: 'true', filtering: 'true')
    }
}

createTask('jarjarify', dependsOn: 'libs') {
    archivePath = archive_jar.archivePath
    tmpArchivePath = "${archivePath}.tmp"
    ant {
        move(file: archivePath, tofile: tmpArchivePath)
        taskdef(name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: dependencies.antpath('jarjar'))
        jarjar(jarfile: archivePath) {
            zipfileset(src: tmpArchivePath)
            dependencies.resolve('jarjarify').each {
                zipfileset(src: it)
            }
            rule(pattern: "net.sf.cglib.**", result: "org.gmock.internal.cglib.@1")
            rule(pattern: "org.objenesis.**", result: "org.gmock.internal.objenesis.@1")
            rule(pattern: "org.objectweb.asm.**", result: "org.gmock.internal.asm.@1")
        }
        delete(file: tmpArchivePath)
    }
}

createTask('integrationTest', dependsOn: 'jarjarify', type: Test).configure {
    options.fork = true
    options.forkOptions.forkMode = ForkMode.ONCE
    options.forkOptions.dir = projectDir
    include("**/*Tests.class", "**/*Test.class")
    exclude("**/Abstract*.class")
    testClassesDir = test.testClassesDir
    testResultsDir = "$buildDir/integration-test-results" as File
    testReportDir = "$buildDir/$reportsDirName/integration-tests" as File
    unmanagedClasspath = [archive_jar.archivePath]
    dependencyManager = dependencies
    skipProperties << 'skip.test'
}



def getTasksDependingOn(theTask) {
    tasks.findAll { name, task -> theTask in task.taskDependencies.getDependencies(task) }.values()
}
