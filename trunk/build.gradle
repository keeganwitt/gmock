apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'wiki'
apply plugin: 'jarjar'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

group = 'org.gmock'
archivesBaseName = 'gmock'

def isRelease = 'release' in gradle.startParameter.taskNames
def isSnapshot = !isRelease

if (isSnapshot) {
    version += '-SNAPSHOT'
}

def sonatypeRepositoryUrl = isRelease ? "https://oss.sonatype.org/service/local/staging/deploy/maven2/" : "https://oss.sonatype.org/content/repositories/snapshots/"

repositories {
    mavenCentral()
}

configurations {
    publicCompile // dependencies which will be written to the pom.xml file
    providedCompile // dependencies which are needed for compilation but optional at runtime
    jarjarifiedCompile // dependencies which are needed but will be jarjarified into the jar file of gmock
    allTestCompile // dependencies which are needed by both unit tests and integration tests

    compile.extendsFrom publicCompile, providedCompile, jarjarifiedCompile
    testCompile.extendsFrom allTestCompile

    intTestCompile.extendsFrom publicCompile, allTestCompile
    intTestRuntime.extendsFrom intTestCompile
}

dependencies {
    publicCompile "org.codehaus.groovy:groovy-all:$compileGroovyVersion"
    providedCompile 'junit:junit:4.5'
    jarjarifiedCompile 'cglib:cglib:2.2.2',
                       'org.objenesis:objenesis:1.2'

    allTestCompile 'junit:junit:4.5',
                   'org.hamcrest:hamcrest-library:1.1',
                   'org.testng:testng:6.3.1',
                   'org.apache.tomcat:servlet-api:6.0.18',
                   'dom4j:dom4j:1.6'
    intTestCompile files(jar.archivePath)
}

sourceSets {
    main {
        java.srcDirs = []
        groovy.srcDirs = ['src/main/java', 'src/main/groovy']
    }
    intTest {
        java.srcDirs = test.java.srcDirs
        groovy.srcDirs = test.groovy.srcDirs
        resources.srcDirs = test.resources.srcDirs
        compileClasspath = configurations.intTestCompile
        runtimeClasspath = output + configurations.intTestRuntime
    }
}

ext {
    samples = subprojects.findAll { it.path.startsWith ':samples:' }
}

// Tasks

defaultTasks ':test'

tasks.jar {
    jarjarify = true
    jarjarifyConfigurations = [configurations.jarjarifiedCompile]
    jarjarifyRule pattern: "net.sf.cglib.**", result: "org.gmock.internal.cglib.@1"
    jarjarifyRule pattern: "org.objenesis.**", result: "org.gmock.internal.objenesis.@1"
    jarjarifyRule pattern: "org.objectweb.asm.**", result: "org.gmock.internal.asm.@1"
}

tasks.compileIntTestJava.dependsOn jar

task intTest(type: Test, dependsOn: [jar, intTestClasses]) {
    group = 'verification'
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
    testReportDir = file("$reporting.baseDir/int-tests")
    testResultsDir = file("$buildDir/int-test-results")
}

samples.each { sample ->
    evaluationDependsOn sample.path
}

tasks.check.dependsOn intTest, ':grails-test:grails-test-app', samples*.check

supportGroovyVersions.split(',').each { supportGroovyVersion ->

    def version = supportGroovyVersion.replaceAll(/[\.-]/, '')

    configurations.create("groovy${version}TestCompile") {
        extendsFrom configurations.intTestCompile
    }
    configurations.create("groovy${version}TestRuntime") {
        extendsFrom configurations."groovy${version}TestCompile"
    }

    dependencies."groovy${version}TestCompile"("org.codehaus.groovy:groovy-all:${supportGroovyVersion}")

    sourceSets.create("groovy${version}Test") {
        java.srcDirs = sourceSets.test.java.srcDirs
        groovy.srcDirs = sourceSets.test.groovy.srcDirs
        resources.srcDirs = sourceSets.test.resources.srcDirs
        compileClasspath = configurations."groovy${version}TestCompile"
        runtimeClasspath = output + configurations."groovy${version}TestRuntime"
    }

    tasks.getByName("compileGroovy${version}TestJava").dependsOn jar

    task "groovy${version}Test"(type: Test, dependsOn: [jar, "groovy${version}TestClasses"]) {
        group = 'verification'
        testClassesDir = sourceSets."groovy${version}Test".output.classesDir
        classpath = sourceSets."groovy${version}Test".runtimeClasspath
        testReportDir = file("$reporting.baseDir/groovy${version}-tests")
        testResultsDir = file("$buildDir/groovy${version}-test-results")
    }

    tasks.check.dependsOn ":groovy${version}Test"

}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from 'build/docs/groovydoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives groovydocJar
    archives sourcesJar
}

if (isRelease) {
    signing {
        sign configurations.archives
    }
}

tasks.uploadArchives {
    repositories.mavenDeployer {
        if (isRelease) {
            beforeDeployment { deployment -> signing.signPom(deployment) }
        }

        repository(url: sonatypeRepositoryUrl) {
            if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
        }

        pom {
            scopeMappings.addMapping 0, configurations.publicCompile, 'compile'
            project {
                name 'Gmock'
                packaging 'jar'
                description 'Mocking Framework for Groovy'
                url 'http://www.gmock.org'
                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    connection 'scm:svn:http://gmock.googlecode.com/svn/trunk/'
                    developerConnection 'scm:svn:https://gmock.googlecode.com/svn/trunk/'
                    url 'http://code.google.com/p/gmock/source/browse/'
                }
                developers {
                    developer {
                        id 'johnnyjian'
                        name 'Johnny Jian'
                    }
                    developer {
                        id 'julien.gagnet'
                        name 'Julien Gagnet'
                    }
                }
            }
        }
    }
}

tasks.wiki {
    def filename = "Documentation_${version[0]}_${version[2]}.wiki"
    url = "http://gmock.googlecode.com/svn/wiki/$filename"
    dir = file("$buildDir/wiki")
    file = file("$dir/$filename")
}

tasks.docs {
    wikiFile = wiki.file
    templateDir = file('docs')
    templateFile = file("$templateDir/template.gsp")
    docsDir = project.docsDir
    docsFile = file("$docsDir/index.html")
}

task wrapper(type: Wrapper) {
    jarFile = file('wrapper/gradle-wrapper.jar')
}

samples*.task('wrapper', type: Wrapper)

task exploded(type: Copy, dependsOn: [jar, docs, samples*.wrapper]) {
    from jar.archivePath
    from 'apache-license-2.0.txt'
    from rootDir, {
        include 'src/**'
        include 'samples/*/src/**'
    }
    from buildDir, {
        include 'docs/**'
        exclude 'docs/groovydoc'
    }
    from rootDir, {
        include 'samples/*/build.gradle'
        expand compileGroovyVersion: compileGroovyVersion
        filter { line ->
            line.replace 'rootProject', "files('../../$jar.archiveName')"
        }
    }
    into "$distsDir/exploded/$archivesBaseName-$version"
}

samples.each { sample ->
    sample.wrapper {
        def projectRelativePath = relativePath(sample.projectDir)
        def explodedDir = exploded.destinationDir
        gradleVersion = wrapper.gradleVersion
        jarFile = file("$explodedDir/wrapper/gradle-wrapper.jar")
        scriptFile = file("$explodedDir/$projectRelativePath/gradlew")
    }
}

task zip(type: Zip, dependsOn: exploded) {
    group = 'build'
    classifier = 'all'
    from exploded.destinationDir.parent
}

tasks.assemble.dependsOn zip

task release(dependsOn: build)
task snapshot(dependsOn: build)
