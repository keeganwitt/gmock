#summary Gmock documentation for gmock-0.5

= Introduction =

Gmock is a mocking framework for the Groovy language. 

Gmock is all about simple syntax and readability of your tests so you spend less time learning the framework and more writing code. To use Gmock just drop the gmock jar file in your classpath and make sure you also have junit.


This documention describe the version 0.5 of Gmock.


= Getting Started =

{{{
import org.gmock.GMockTestCase

class LoaderTest extends GMockTestCase {
    void testLoader(){
        def mockLoader = mock()
        mockLoader.load('key').returns('value')
        play {
            assertEquals "value", mockLoader.load('key')
        }
    }
}  
}}}

  * First extends the `GMockTestCase`
  * Create mock object using the `mock()` method
  * Setup expectation by calling the method you expect on your mock
  * Run the code you are testing within the `play` closure


= Cookbook =

== Expectation and Play mode == 

Mock object are created using the `mock()` method available in `GMockTestCase`. By default mock object will record method call and generate expectation. 

The code under test should run through the `play` closure. 
{{{
void testBasic(){
  def aMock = mock()
  // setup expectation
  play {
    // run your code 
  }
}
}}}

Gmock support Java strong typing the `mock()` method take an optional class. See more in the strong typing section.
{{{
  File mockFile = mock(File)
}}}



== Mock method call ==

Method call expectation are created when calling method on Mock. Return value can be setup using the `returns` keyword. 
{{{
def loader = mock()
loader.put("fruit").returns("apple")
play {
  assertEquals "apple", loader.put("fruit") 
}
}}}

Exception can be setup using the `raises` keyword.
{{{
def loader = mock()
loader.put("throw exception").raises(new RuntimeException("an exception"))
play {
  try {
    loader.put("throw exception") 
  } catch (RuntimeException e){
    assertEquals "an exception", e.message
  }
}
}}}


== Mock property call ==

Property call should be mock using the following syntax. For Setter and getter
{{{
def loader = mock()
loader.name.set("a name")
loader.name.returns("a different name")
play {
  loader.name = "a name"
  assertEquals "a different name", loader.name
}
}}}


Support for exception and method stub is similar to standard method call. Ex:
  * `loader.name.raises(new RuntimeException())`
  * `loader.name.set("invalid).raises(new RuntimeException())`
  *  `mockLoader.name.returns('a name').stub()`


== Mock static method call ==

Mocking static method call is similar to standard method call, just add the static keyword:
{{{
def mockMath = mock(Math)
mockMath.static.random().returns(0.5)

play {
   assertEquals 0.5, Math.random()
}
}}}



== Mock constructor call ==

Constructor call are mocked using the following syntax:
{{{
def mockFile = mock(File, constructor("/a/path/file.txt"))
}}}
This would match: `new File("/a/path/file.txt")`. The mockFile can then be used to setup further expectation.

Here is the full picture:
{{{
def mockFile = mock(File, constructor("/a/path/file.txt"))
mockFile.getName().returns("file.txt")
play {
  def file = new File("/a/path/file.txt")
  assertEquals "file.txt", file.getName()
}
}}}

You can expect an exception to be raised when a constructor call is matched:
{{{
def mockFile = mock(File, constructor("/a/path/file.txt").raises(new RuntimeException()))
play {
  shouldFail (RuntimeException){
    new File("/a/path/file.txt")
  }
}
}}}

== Strong typing ==

Gmock support out of the box java strong typing. You don't need to import any library we've worry about that for you.
{{{
File mockFile = mock(File)
}}}

Strong typing works well with constructor call expectation:
{{{
File mockFile = mock(File, constructor("/a/path/file.txt"))
mockFile.getName().returns("file.txt")
play {
  def file = new File("/a/path/file.txt")
  assertEquals "file.txt", file.getName()
}
}}}

Sometime you need to call the original constructor when mocking an object. Use the `invokeConstructor` for that purpose:
{{{
JavaLoader mock = mock(JavaLoader, invokeConstructor("loader"), constructor("name"))
}}}
This would create a `JavaLoader` using its constructor with "loader" during the process of creation of the mock. 

== Time matching ==

Gmock let you specify how many times an expectation can be call. Like here:
{{{
mockLoader.load(2).returns(3).atLeastOnce()
play {
    assertEquals 3, mockLoader.load(2)
    assertEquals 3, mockLoader.load(2)
}
}}}

The supported time matcher are:
  * *never()* the expectation should never be called
  * *once()* one time expectation (this is the implicit default)
  * *atLeastOnce()* one time or more
  * *atMostOnce()* zero or one time expectation
  * *stub()* the expectation can be call anytime
  * *times(3)* the expectation need to be call n times
  * *times(2..4)* the expectation need to be call n times within the range
  * *atLeast(4)* the expectation need to be call at least n time
  * *atMost(4)* the expectation need to be call at most n time


== Using matcher == 

You can setup customised matcher in your expectation using the `match` syntax. The argument get passed to match closure and you should return true if it match.

Here is the idea:
{{{
mockLoader.put("test", match { it > 5 }).returns("correct")
play {
  assertEquals "correct", mockLoader.put("test", 10)
}
}}}

Gmock is also fully compatible with [http://code.google.com/p/hamcrest/ Hamcrest] matcher. You will have to include the optional Hamcrest library in your classpath 

Here is an example:
{{{
mockLoader.put("test", is(not(lessThan(5)))).returns("correct")

play {
    assertEquals "correct", mockLoader.put("test", 10)
}
}}}
== Not extending the GMockTestCase ==

If you don't want or can't extends the `GMockTestCase` in your test you can use the GMockController. 

In the beginning of your test create a new `GMockController`. You then can use its `mock()` method an `play` closure as a usual Gmock test.

{{{
void testController(){
  def gmc = new GMockController()
  def mockLoader = gmc.mock()
  mockLoader.load('key').returns('value')
  gmc.play {
    assertEquals "value", mockLoader.load('key')
  }
}
}}}